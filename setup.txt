# selecting an individual cell
-> use the double square bracket notation to look at the second entry in the column
	>df['DATE'][1]
-> Alternatively, for column names no spaces, we can also use the dot-notation
	>df.DATE[1]

# inspecting the data type
-> type(df['DATE'][1])

# convert the string to a timestamp using the to_datetime() method
-> print(pd.to_datetime(df['DATE'][1]))
   type(pd.to_datetime(df['DATE'][1]))	

# .pivot() method
-> used if we want to convert our Dataframe so that each category has its own column
-> For example, suppose we need to take the table below and create a separate column for each actor, where each
   row is the Age of the actor
-> Table:
	     Age      Actor  Power
	0  Young       Jack    100
	1  Young     Arnold     80
	2  Young      Keanu     25
	3  Young  Sylvester     50
	4    Old       Jack     99
	5    Old     Arnold     75
	6    Old      Keanu      5
	7    Old  Sylvester     30
-> pivoted_df = df.pivot(index='Age', columns='Actor', values='Power')
-> arguments to get the desired outcomes are:
	index: are categories for the row
	columns: are the categories for columns 
	values: are what you want in the new cells
-> pivoted_df:
	Actor	Arnold	Jack	Keanu	Sylvester
	Age				
	Old	75	99	5	30
	Young	80	100	25	50

# Dealing with NaN values:
-> if we want to substitute any number for each NaN value in the dataframe, use the ".fillna() method
-> to replace NaN with O use:
	>reshaped_df.fillna(0, inplace=True)
-> the inplace argument means that we are updating "reshaped_df". Without this argument we would have to 
   write something like this:
	>reshaped_df = reshaped_df.fillna(0)
-> check if there are any NaN values left in the entire Dataframe with:
	>reshaped_df.isna().values.any()
-> the .isna() method is used with two more things being chained: "values" attribute and the "any()" method.
   this means that we don't have to search through the entire DataFrame to spot if .isna() is True

# Rolling mean
-> time-series data can be quite noisy with lots of up and down spikes which make it difficult to see what's 
   going on
-> a useful technique to make a trend apparent is to smooth out the observations by taking an average
-> is constructed by averaging observations
-> we calculate the average in a window of time and move it forward by one observations at a time
-> pandas has two handy methods built in for this texhnique: rolling() and mean(). we can chain these two
   methods up to create a DataFrame made up of the averaged observations
